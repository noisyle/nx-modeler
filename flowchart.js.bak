/**
 * [Flowchart 根据需求对流程图的封装]
 * 依赖jquery.js
 * @method Flowchart
 * @param  {[array]}  node [description]
 * @param  {[array]}  line [description]
 */
function Flowchart(id, data) {
  //流程图容器id
  this.id = id;
  //流程图的节点图
  this.node = data.node;
  //流程图的线
  this.line = data.line;
}

Flowchart.prototype = {
  constructor: Flowchart,
  instance: jsPlumb.getInstance({
    ConnectionOverlays: [
      ["Arrow", {//箭头的样式
        location: 1,
        visible: true,
        width: 11,
        length: 11,
        id: "ARROW",
      }],
      ["Label", {//连线上的label
        location: 0.4,
        id: "label",
        cssClass: "aLabel",
      }]
    ],
    Container: "canvas" //画布容器
  }),
  config: {
    nodeName: 'LCTNODE',//对应html里节点的ID前缀
    elementName: 'node',
    editable: false,
    sourceEndpoint: {
      endpoint: "Dot",
      paintStyle: {
        //stroke: "#7AB02C",
        fill: "transparent",
        radius: 7,
        strokeWidth: 1
      },
      isSource: true,
      connector: ["Flowchart", {
        stub: [40, 60],
        //gap: 10,
        cornerRadius: 5,//连线的弯曲度
        alwaysRespectStubs: true
      }],//流程图的线
      connectorStyle: {
        strokeWidth: 2,
        stroke: "#61B7CF",
        joinstyle: "round",
        outlineStroke: "white",
        outlineWidth: 5
      },
      connectorHoverStyle: {
        strokeWidth: 3,
        stroke: "#216477",
        outlineWidth: 5,
        outlineStroke: "white"
      },
      maxConnections: 3,
    },
    targetEndpoint: {
      endpoint: "Dot",
      paintStyle: {
        //fill: "#7AB02C",
        radius: 7
      },
      maxConnections: 3,
      isTarget: true,
    }
  },
  _addEndpoints: function () {
    for (var i in this.node) {
      var _node = this.node[i];
      //画出点
      if (_node.source) {
        _node.source = _node.source.split(',');
      } else {
        _node.source = [];
      }
      for (var j = 0; j < _node.source.length; j++) {
        //设置uuid的规则  例如'LCTNODE1bottomCenter'
        var sourceUUID = this.config.nodeName + _node.id + _node.source[j];
        this.instance.addEndpoint(this.config.nodeName + _node.id, this.config.sourceEndpoint, {
          anchor: _node.source[j],
          uuid: sourceUUID
        });
      }
      //画入点
      if (_node.target) {
        _node.target = _node.target.split(',');
      } else {
        _node.target = [];
      }
      for (var j = 0; j < _node.target.length; j++) {
        //设置uuid的规则  例如'LCTNODE1bottomCenter'
        var sourceUUID = this.config.nodeName + _node.id + _node.target[j];
        this.instance.addEndpoint(this.config.nodeName + _node.id, this.config.targetEndpoint, {
          anchor: _node.target[j],
          uuid: sourceUUID
        });
      }
    }
  },
  _connect: function () {
    for (var i in this.line) {
      var _line = this.line[i];
      var source = this.config.nodeName + _line.node_id + _line.source;
      var target = this.config.nodeName + _line.next_node_id + _line.target;
      var connection = this.instance.connect({
        uuids: [source, target],
        editable: this.config.editable,
      });
      if (connection) {
        connection.getOverlay('label').setLabel(_line.label);
      }
    }
  },
  _helper: {
    uuid2nodeId: function (uuid) {
      var arr = uuid.match(/\d+/);
      return arr[0];
    },
    uuid2AnchorLocation: function (uuid) {
      var str = uuid.replace(/(.*)\d+/, '');
      return str;
    }
  },
  show: function () {
    this._addEndpoints();
    this._connect();
  }
}